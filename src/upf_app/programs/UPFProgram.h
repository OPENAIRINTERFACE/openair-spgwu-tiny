#ifndef __UPFPROGRAMMANAGER_H__
#define __UPFPROGRAMMANAGER_H__

#include <ProgramLifeCycle.hpp>
#include <atomic>
#include <linux/bpf.h> // manage maps (e.g. bpf_update*)
#include <memory>
#include <mutex>
#include <signal.h> // signals
#include <upf_xdp_bpf_skel.h>
#include <wrappers/BPFMap.hpp>

class BPFMaps;
class BPFMap;
class SessionManager;
class RulesUtilities;

using UPFProgramLifeCycle = ProgramLifeCycle<upf_xdp_bpf_c>;

/**
 * @brief Singleton class to abrastract the UPF bpf program.
 */
class UPFProgram
{
public:
  /**
   * @brief Construct a new UPFProgram object.
   *
   */
  explicit UPFProgram(const std::string& gtpInterface, const std::string& udpInterface);
  /**
   * @brief Destroy the UPFProgram object
   */
  virtual ~UPFProgram();
  /**
   * @brief Setup the BPF program.
   *
   */
  void setup();
  /**
   * @brief Get the BPFMaps object.
   *
   * @return std::shared_ptr<BPFMaps> The reference of the BPFMaps.
   */
  std::shared_ptr<BPFMaps> getMaps();
  /**
   * @brief Tear downs the BPF program.
   *
   */
  void tearDown();
  /**
   * @brief Update program int map.
   *
   * @param key The key which will be inserted the program file descriptor.
   * @param fd The file descriptor.
   */
  void updateProgramMap(uint32_t key, uint32_t fd);
  /**
   * @brief Remove program in map.
   *
   * @param key The key which will be remove in the program map.
   */
  void removeProgramMap(uint32_t key);
  /**
   * @brief Get the TEID to session Map object.
   *
   * @return std::shared_ptr<BPFMap> The TEID to fd map.
   */
  std::shared_ptr<BPFMap> getTeidSessionMap() const;
  /**
   * @brief Get the UE IP to session Map object.
   *
   * @return std::shared_ptr<BPFMap> The UE IP to fd map.
   */
  std::shared_ptr<BPFMap> getUeIpSessionMap() const;
  /**
   * @brief Get the NextProgRule Map object.
   *
   * @return std::shared_ptr<BPFMap> The NextProgRule to fd map.
   */
  std::shared_ptr<BPFMap> getNextProgRuleMap() const;
  /**
   * @brief Get the NextProgRuleIndex Map object.
   *
   * @return std::shared_ptr<BPFMap> The pdi to index map.
   */
  std::shared_ptr<BPFMap> getNextProgRuleIndexMap() const;

private:
  /**
   * @brief Initialize BPF wrappers maps.
   *
   */
  void initializeMaps();

  // The reference of the bpf maps.
  std::shared_ptr<BPFMaps> mpMaps;

  // The skeleton of the UPF program generated by bpftool.
  // ProgramLifeCycle is the owner of the pointer.
  upf_xdp_bpf_c *spSkeleton;

  // The program eBPF map.
  std::shared_ptr<BPFMap> mpTeidSessionMap;

  // The program eBPF map.
  std::shared_ptr<BPFMap> mpUeIpSessionMap;

  // The pdi key to program index map.
  std::shared_ptr<BPFMap> mpNextProgRuleIndexMap;

  // The next prog rule map.
  std::shared_ptr<BPFMap> mpNextProgRuleMap;

  // The BPF lifecycle program.
  std::shared_ptr<UPFProgramLifeCycle> mpLifeCycle;

  // The GTP interface.
  std::string mGTPInterface;

  // The UDP interface.
  std::string mUDPInterface;
};

#endif // __BPFPROGRAMMANAGER_H__

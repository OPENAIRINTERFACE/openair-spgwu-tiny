#ifndef __FARPROGRAM_H__
#define __FARPROGRAM_H__

#include <ProgramLifeCycle.hpp>
#include <atomic>
#include <linux/bpf.h> // manage maps (e.g. bpf_update*)
#include <memory>
#include <mutex>
#include <signal.h> // signals
#include <far_bpf_skel.h>
#include <wrappers/BPFMap.hpp>
#include <BPFProgram.h>

class BPFMaps;
class BPFMap;
class SessionManager;
class RulesUtilities;

using FARProgramLifeCycle = ProgramLifeCycle<far_bpf_c>;

/**
 * @brief Singleton class to abrastract the UPF bpf program.
 */
class FARProgram : public BPFProgram
{
public:
  /**
   * @brief Construct a new FARProgram object.
   *
   */
  explicit FARProgram();
  /**
   * @brief Destroy the FARProgram object
   */
  virtual ~FARProgram();
  /**
   * @brief Setup the BPF program.
   *
   */
  void setup();
  /**
   * @brief Get the BPFMaps object.
   *
   * @return std::shared_ptr<BPFMaps> The reference of the BPFMaps.
   */
  std::shared_ptr<BPFMaps> getMaps();
  /**
   * @brief Tear downs the BPF program.
   *
   */
  void tearDown();
  /**
   * @brief Update program int map.
   *
   * @param key The key which will be inserted the program file descriptor.
   * @param fd The file descriptor.
   */
  void updateProgramMap(uint32_t key, uint32_t fd);
  /**
   * @brief Remove program in map.
   *
   * @param key The key which will be remove in the program map.
   */
  void removeProgramMap(uint32_t key);
  /**
   * @brief Get the TEID to session Map object.
   *
   * @return std::shared_ptr<BPFMap> The TEID to fd map.
   */
  std::shared_ptr<BPFMap> getFARMap() const;
  /**
   * @brief Get the Egress Interface Map object.
   *
   * @return std::shared_ptr<BPFMap> The egress interface map.
   */
  std::shared_ptr<BPFMap> getEgressInterfaceMap() const;
  /**
   * @brief Get the Arp Table Map object.
   *
   * @return std::shared_ptr<BPFMap>  The arp table map.
   */
  std::shared_ptr<BPFMap> getArpTableMap() const;

  int getFd() const;
private:
  /**
   * @brief Initialize BPF wrappers maps.
   *
   */
  void initializeMaps();

  // The reference of the bpf maps.
  std::shared_ptr<BPFMaps> mpMaps;

  // The skeleton of the UPF program generated by bpftool.
  // ProgramLifeCycle is the owner of the pointer.
  far_bpf_c *spSkeleton;

  // The program eBPF map.
  std::shared_ptr<BPFMap> mpFARMap;

  // The egress interface map.
  std::shared_ptr<BPFMap> mpEgressInterfaceMap;

  // The arp table map.
  std::shared_ptr<BPFMap> mpArpTableMap;

  // The BPF lifecycle program.
  std::shared_ptr<FARProgramLifeCycle> mpLifeCycle;
};

#endif // __FARPROGRAM_H__

################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
SPGW-U =
{
    # FQDN for 4G
    FQDN = "gw{{ env["GW_ID"] }}.spgw.node.epc.mnc{{ env["MNC03"] }}.mcc{{ env["MCC"] }}.{{ env["REALM"] }}";
    # 0 is the default
    INSTANCE      = 0;
    # /var/run is the default
    PID_DIRECTORY = "{{ env["PID_DIRECTORY"] if "PID_DIRECTORY" in env.keys() else '/var/run' }}";

    #ITTI_TASKS :
    #{
        #ITTI_TIMER_SCHED_PARAMS :
        #{
            #CPU_ID       = 1;
            #SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
            #SCHED_PRIORITY = 85;
        #};
        #S1U_SCHED_PARAMS :
        #{
            #CPU_ID       = 1;
            #SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
            #SCHED_PRIORITY = 84;
        #};
        #SX_SCHED_PARAMS :
        #{
            #CPU_ID       = 1;
            #SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
            #SCHED_PRIORITY = 84;
        #};
        #ASYNC_CMD_SCHED_PARAMS :
        #{
            #CPU_ID       = 1;
            #SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
            #SCHED_PRIORITY = 84;
        #};
    #};

    INTERFACES :
    {
        S1U_S12_S4_UP :
        {
            # S-GW binded interface for S1-U communication (GTPV1-U) can be ethernet interface, virtual ethernet interface, we don't advise wireless interfaces
            # STRING, interface name, YOUR NETWORK CONFIG HERE
            INTERFACE_NAME         = "{{ env["SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP"] if "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP" in env.keys() else 'eth0' }}";
            # STRING, CIDR or "read to let app read interface configured IP address
            IPV4_ADDRESS           = "read";
            #PORT                   = 2152;                                     # Default is 2152
            SCHED_PARAMS :
            {
                #CPU_ID        = 2;
                # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
                SCHED_POLICY   = "SCHED_FIFO";
                SCHED_PRIORITY = {{ env["THREAD_S1U_PRIO"] if "THREAD_S1U_PRIO" in env.keys() else '88' }};
                POOL_SIZE      = {{ env["S1U_THREADS"] if "S1U_THREADS" in env.keys() else '1' }};
            };
        };
        SX :
        {
            # S/P-GW binded interface for SX communication
            INTERFACE_NAME         = "{{ env["SGW_INTERFACE_NAME_FOR_SX"] if "SGW_INTERFACE_NAME_FOR_SX" in env.keys() else 'eth0' }}";
            IPV4_ADDRESS           = "read";
            #PORT                   = 8805;                         # Default is 8805
            SCHED_PARAMS :
            {
                #CPU_ID        = 1;
                SCHED_POLICY   = "SCHED_FIFO";
                SCHED_PRIORITY = {{ env["THREAD_SX_PRIO"] if "THREAD_SX_PRIO" in env.keys() else '88' }};
                POOL_SIZE      = {{ env["SX_THREADS"] if "SX_THREADS" in env.keys() else '1' }};
            };
        };
        SGI :
        {
           # No config to set, the software will set the SGi interface to the interface used for the default route.
            INTERFACE_NAME         = "{{ env["PGW_INTERFACE_NAME_FOR_SGI"] if "PGW_INTERFACE_NAME_FOR_SGI" in env.keys() else 'eth0' }}";
            IPV4_ADDRESS           = "read";
            SCHED_PARAMS :
            {
                #CPU_ID        = 3;
                SCHED_POLICY   = "SCHED_FIFO";
                SCHED_PRIORITY = {{ env["THREAD_SGI_PRIO"] if "THREAD_SGI_PRIO" in env.keys() else '98' }};
                POOL_SIZE      = {{ env["SGI_THREADS"] if "SGI_THREADS" in env.keys() else '1' }};
            };
        };
    };

    # SNAT Values in {yes, no}
    SNAT = "{{ env["NETWORK_UE_NAT_OPTION"] if "NETWORK_UE_NAT_OPTION" in env.keys() else 'no' }}";

    PDN_NETWORK_LIST  = (
                      {NETWORK_IPV4 = "{{ env["NETWORK_UE_IP"] }}";} # 1 ITEM SUPPORTED ONLY
                    );

    SPGW-C_LIST = (
         {#- To be backward-compatible #}
         {%- if env["SPGWC_HOSTNAME"] is defined %}
         {IPV4_ADDRESS="{{ resolve(env["SPGWC_HOSTNAME"]) }}" ;}
         {#- Force dummy value in 5G case #}
         {%- elif env["ENABLE_5G_FEATURES"] is defined and env["ENABLE_5G_FEATURES"] == "yes" %}
         {IPV4_ADDRESS="127.0.0.1" ;}
         {%- else %}
         {IPV4_ADDRESS="{{ env["SPGWC0_IP_ADDRESS"] }}" ;}
         {%- endif %}
    );

    NON_STANDART_FEATURES :
    {
        # 'no' for standard features, yes for enhancing UL throughput
        BYPASS_UL_PFCP_RULES = "{{ env["BYPASS_UL_PFCP_RULES"] if "BYPASS_UL_PFCP_RULES" in env.keys() else 'no' }}";
    };

    SUPPORT_5G_FEATURES:
    {
       {%- if env["ENABLE_5G_FEATURES"] is defined %}
       # STRING, {"yes", "no"},
       # Set to 'yes' to support 5G Features
       ENABLE_5G_FEATURES = "{{ env["ENABLE_5G_FEATURES"] }}";
       # Set to 'yes' if UPF registers to an NRF
       REGISTER_NRF       = "{{ env["REGISTER_NRF"] }}";
       # Set to 'yes' if UPF relies on a DNS/FQDN service to resolve NRF's FQDN
       USE_FQDN_NRF       = "{{ env["USE_FQDN_NRF"] if "USE_FQDN_NRF" in env.keys() else 'no' }}";
       # Set FQDN of UPF
       UPF_FQDN_5G        = "{{ env["UPF_FQDN_5G"] if "UPF_FQDN_5G" in env.keys() else 'localhost' }}";
       {%- else %}
       ENABLE_5G_FEATURES = "no"   # Set to 'yes' to support 5G Features
       REGISTER_NRF       = "no";        # Set to 'yes' if UPF registers to an NRF
       USE_FQDN_NRF       = "no";        # Set to 'yes' if UPF relies on a DNS/FQDN service to resolve NRF's FQDN
       UPF_FQDN_5G        = "none";      # Set FQDN of UPF
       {%- endif %}

       NRF :
       {
          {#- To be backward-compatible #}
          {%- if env["NRF_HOSTNAME"] is defined %}
          IPV4_ADDRESS = "{{ resolve(env["NRF_HOSTNAME"]) }}";
          {%- else %}
          IPV4_ADDRESS = "{{ env["NRF_IPV4_ADDRESS"] }}";
          {%- endif %}
          # YOUR NRF CONFIG HERE (default: 80)
          PORT         = {{ env["NRF_PORT"] if "NRF_PORT" in env.keys() else '80' }};
          # Set HTTP version for NRF (1 or 2). Default 1
          HTTP_VERSION = {{ env["HTTP_VERSION"] if "HTTP_VERSION" in env.keys() else '1' }};
          # YOUR NRF API VERSION HERE. Default v1
          API_VERSION  = "{{ env["NRF_API_VERSION"] if "NRF_API_VERSION" in env.keys() else 'v1' }}";
          # Set FQDN of NRF
          FQDN         = "{{ env["NRF_FQDN"] }}";
       };

       # Additional info to be sent to NRF for supporting Network Slicing
       UPF_INFO = (
          {%- if env["NSSAI_SST_0"] is defined %}
          {
            NSSAI_SST = {{ env["NSSAI_SST_0"] }};
            NSSAI_SD = "{{ env["NSSAI_SD_0"] if "NSSAI_SD_0" in env.keys() else '0xFFFFFF' }}";
            DNN_LIST = (
              {
                DNN = "{{ env["DNN_0"] if "DNN_0" in env.keys() else 'oai' }}";
              }
            );
          }
          {%- if env["NSSAI_SST_1"] is defined %}
          ,{
            NSSAI_SST = {{ env["NSSAI_SST_1"] }};
            NSSAI_SD = "{{ env["NSSAI_SD_1"] if "NSSAI_SD_1" in env.keys() else '0xFFFFFF' }}";
            DNN_LIST = (
              {
                DNN = "{{ env["DNN_1"] }}";
              }
            );
          }
          {%- endif %}
          {%- if env["NSSAI_SST_2"] is defined %}
          ,{
            NSSAI_SST = {{ env["NSSAI_SST_2"] }};
            NSSAI_SD = "{{ env["NSSAI_SD_2"] if "NSSAI_SD_2" in env.keys() else '0xFFFFFF' }}";
            DNN_LIST = (
              {
                DNN = "{{ env["DNN_2"] }}";
              }
            );
          }
          {%- endif %}
          {%- if env["NSSAI_SST_3"] is defined %}
          ,{
            NSSAI_SST = {{ env["NSSAI_SST_3"] }};
            NSSAI_SD = "{{ env["NSSAI_SD_3"] if "NSSAI_SD_3" in env.keys() else '0xFFFFFF' }}";
            DNN_LIST = (
              {
                DNN = "{{ env["DNN_3"] }}";
              }
            );
          }
          {%- endif %}
          {%- else %}
          { NSSAI_SST = 1; NSSAI_SD = "0xFFFFFF";  DNN_LIST = ({DNN = "oai";}); }
          {%- endif %}
       );
    }
};
